import { useCallback, useContext, useState, useMemo } from 'react'
import { useRouter } from 'next/navigation'
import { dashboardContext, nullAccount } from '@context'
import { Choice, Switch, Dropdown, Request, MIN_YEAR, MAX_YEAR, TOO_MANY_REQS_MSG } from '@utils'
import type { WeekendDays, InputEvent } from '@types'
import Sidebar from '../_Sidebar'

const Account = () => {
    const router = useRouter()
    const { account, setAccount, employees, shifts, schedules, holidays, openModal, closeModal, setModalContent } = useContext(dashboardContext)

    /** Counts the total number of schedules generated by the account */
    const countSchedules = useCallback((): number => {
        let count = 0
        for (let year = MIN_YEAR; year <= MAX_YEAR; year++) {
            const schedulesOfYear = schedules.get(year)
            if (schedulesOfYear === undefined) continue
            for (let j = 0; j < schedulesOfYear.length; j++) count += schedulesOfYear[j] ? 1 : 0
        }
        return count
    }, [schedules])

    // Memoized account stats
    const employeeCountText = useMemo(() => `${employees.length} pediatrician${employees.length === 1 ? '' : 's'} registered`, [employees.length])
    const shiftCountText = useMemo(() => `${shifts.length} shift${shifts.length === 1 ? '' : 's'} assigned per day`,[shifts.length])
    const scheduleCountText = useMemo(() => {
        const numSchedules = countSchedules()
        return `${numSchedules} schedule${numSchedules === 1 ? '' : 's'} generated`
    }, [countSchedules])
    const holidayCountText = useMemo(() => `${holidays.length} holiday${holidays.length === 1 ? '' : 's'} assigned`, [holidays.length])

    /** Logs out of the account */
    const logOut = useCallback(async () => {
        await new Request(`accounts/logout`, () => { setAccount(nullAccount); router.push('/') }).get()
    }, [router, setAccount])

    /** Displays an account deletion modal. If confirmed, sends an API request to delete the account */
    const openDeleteModal = useCallback(() => {
        const DeleteAccountModalContent = () => {
            const [error, setError] = useState('')

            const deleteAccount = useCallback(async () => {
                await new Request(
                    'accounts',
                    async () => await logOut(),
                    (error) => {
                        if (error.includes('429')) { setError(TOO_MANY_REQS_MSG); return }
                        setError(
                            error.includes('Invalid cookies') ?
                            'Account session has expired. Please log out then log in again to delete your account.'
                            : error
                        )
                    }
                ).delete()
            }, [])

            return <>
                <h1>Delete Your Account?</h1>
                {error && <p className='error'>{error}</p>}
                <Choice onYes={deleteAccount} onNo={closeModal}/>
            </>
        }
        setModalContent(<DeleteAccountModalContent/>)
        openModal()
    }, [logOut, closeModal, openModal, setModalContent])

    /** Displays a modal for confirming log-out */
    const openLogOutModal = useCallback(() => {
        setModalContent(<>
            <h1>Log Out?</h1>
            <Choice onYes={logOut} onNo={closeModal}/>
        </>)
        openModal()
    }, [logOut, closeModal, openModal, setModalContent])

    /** Displays a modal for editing the account's username */
    const openEditUsernameModal = useCallback(() => {
        const EditUsernameModalContent = () => {
            const [tempUsername, setTempUsername] = useState(account.username)
            const [isConfirmDisabled, setConfirmDisabled] = useState(tempUsername.trim().length < 3 || account.username === tempUsername)
            const [error, setError] = useState('')

            const handleUsernameChange = (e: InputEvent) => {
                const newUsername = e.target.value
                setTempUsername(newUsername)
                setConfirmDisabled(newUsername.trim().length < 1 || account.username === newUsername)
            }

            const confirmEdit = async () => {
                await new Request(
                    'accounts',
                    (resAccount: { account_id: number, username: string }) => {
                        setAccount({ ...resAccount, id: resAccount.account_id })
                        closeModal()
                    },
                    (error) => {
                        if (error.includes('429')) { setError(TOO_MANY_REQS_MSG); return }
                        setError(
                            error.includes('Invalid cookies') 
                            ? 'Account session has expired. Please log out then log in again to update your username.'
                            : error
                        )
                    }
                ).patch({ username: tempUsername })
            }

            return <>
                <h2>Edit Username</h2>
                <section style={{ marginBottom: 20 }}>
                    <label style={{ marginRight: 10 }}>Username: </label>
                    <input
                        type='text'
                        placeholder='New username'
                        value={tempUsername}
                        onChange={handleUsernameChange}
                        maxLength={32}
                    />
                </section>
                {error && <p className='error'>{error}</p>}
                <button
                    onClick={confirmEdit}
                    disabled={isConfirmDisabled}
                    id={isConfirmDisabled ? 'disabled-confirm-btn' : ''}
                >
                    Confirm
                </button>
            </>
        }

        setModalContent(<EditUsernameModalContent/>)
        openModal()
    }, [account, setAccount, openModal, closeModal, setModalContent])

    /** Displays a modal for creating a new password */
    const openChangePasswordModal = useCallback(() => {
        const ChangePasswordModalContent = () => {
            const [tempNewPassword, setNewPassword] = useState('')
            const [tempConfirmPassword, setConfirmPassword] = useState('')
            const [isConfirmDisabled, setConfirmDisabled] = useState(tempNewPassword.trim().length < 3)
            const [error, setError] = useState('')

            const handleNewPasswordChange = (e: InputEvent) => {
                const newPassword = e.target.value
                setNewPassword(newPassword)
                setConfirmDisabled(newPassword.trim().length < 1)
            }

            const handleConfirmPasswordChange = (e: InputEvent) => {
                const confirmPassword = e.target.value
                setConfirmPassword(confirmPassword)
                setConfirmDisabled(tempNewPassword.trim().length < 1)
            }

            const confirmEdit = async () => {
                if (tempNewPassword.trim() !== tempConfirmPassword.trim()) {
                    setError('Make sure both entered passwords exactly match.')
                    return
                }

                await new Request(
                    'accounts',
                    (resAccount: { account_id: number, username: string }) => {
                        setAccount({ ...resAccount, id: resAccount.account_id })
                        closeModal()
                    },
                    (error) => {
                        if (error.includes('429')) { setError(TOO_MANY_REQS_MSG); return }
                        setError(
                            error.includes('Invalid cookies') 
                            ? 'Session has expired. Please log out then log in again to update your password.'
                            : error
                        )
                    }
                ).patch({ new_password: tempNewPassword })
            }

            return <>
                <h2>Change Password</h2>
                <section className='modal-input-sec'>
                    <label style={{ marginRight: 10 }}>New password: </label>
                    <input
                        type='password'
                        placeholder='New password'
                        value={tempNewPassword}
                        onChange={handleNewPasswordChange}
                        maxLength={32}
                    />
                </section>
                <section className='modal-input-sec'>
                    <label style={{ marginRight: 10 }}>Confirm password: </label>
                    <input
                        type='password'
                        placeholder='Confirm password'
                        value={tempConfirmPassword}
                        onChange={handleConfirmPasswordChange}
                        maxLength={32}
                    />
                </section>
                {error && <p className='error'>{error}</p>}
                <button
                    onClick={confirmEdit}
                    disabled={isConfirmDisabled}
                    id={isConfirmDisabled ? 'disabled-confirm-btn' : ''}
                >
                    Confirm
                </button>
            </>
        }

        setModalContent(<ChangePasswordModalContent/>)
        openModal()
    }, [setAccount, openModal, closeModal, setModalContent])

    return (
        <section id='account-card' className='settings-card'>
            <h3 className='settings-title'>Account</h3>
            <div className='card-content'>
                <section>
                    <h1>{account.username}</h1>
                    <ul>
                        <li>{scheduleCountText}</li>
                        <li>{employeeCountText}</li>
                        <li>{shiftCountText}</li>
                        <li>{holidayCountText}</li>
                    </ul>
                </section>
                <section id='account-actions-card'>
                    <button className='edit-account-btn' onClick={openEditUsernameModal}>Edit Username</button>
                    <button className='edit-account-btn' onClick={openChangePasswordModal}>Change Password</button>
                    <button id='log-out-btn' onClick={openLogOutModal}>Log Out</button>
                    <button id='delete-account-btn' onClick={openDeleteModal}>Delete Account</button>
                </section>
            </div>
        </section>
    )
}


const PreferencesAndFunctionality = () => {
    const { account, settings, setSettings } = useContext(dashboardContext)
    const [selectedWeekendDays, setSelectedWeekendDays] = useState<WeekendDays>(settings.weekendDays)

    /** Switches between light & dark themes */
    const toggleDarkTheme = async () => {
        await new Request(
            `accounts/${account.id}/settings/toggle_dark_theme`,
            (data: { detail: boolean|null }) => setSettings(prev => ({...prev, darkThemeEnabled: data.detail ? true : false }))
        ).get()
    }

    /** Turns on/off advanced mode */
    const toggleMinMaxWorkHours = async () => {
        await new Request(
            `accounts/${account.id}/settings/toggle_min_max_work_hours`,
            (data: { detail: boolean|null }) => setSettings(prev => ({...prev, minMaxWorkHoursEnabled: data.detail ? true : false }))
        ).get()
    }

    /** Allows/Disallows multiple employees to be in a single shift */
    const toggleMultiEmpsInShift = async () => {
        await new Request(
            `accounts/${account.id}/settings/toggle_multi_emps_in_shift`,
            (data: { detail: boolean|null }) => setSettings(prev => ({...prev, multiEmpsInShiftEnabled: data.detail ? true : false }))
        ).get()
    }

    /** Allows/Disallows one employee to take multiple shifts in the same day */
    const toggleMultiShiftsOneEmpEnabled = async () => {
        await new Request(
            `accounts/${account.id}/settings/toggle_multi_shifts_one_emp`,
            (data: { detail: boolean|null }) => setSettings(prev => ({...prev, multiShiftsOneEmpEnabled: data.detail ? true : false }))
        ).get()
    }

    /** Changes the weekend days of the account */
    const changeWeekendDays = async (option: string) => {
        setSelectedWeekendDays(option as WeekendDays)
        await new Request(
            `accounts/${account.id}/settings/update_weekend_days`,
            (data: { detail: WeekendDays }) => setSettings(prev => ({...prev, weekendDays: data.detail }))
        ).patch({ weekend_days: option })
    }

    /** Updates the maximum number of employees in a single shift */
    const updateMaxEmpsInShift = async (e: InputEvent) => {
        if (!settings.multiEmpsInShiftEnabled) return
        const newValue = parseInt(e.target.value, 10)
        await new Request(
            `accounts/${account.id}/settings/max_emps_in_shift`,
            (data: { detail: number }) => setSettings(prev => ({...prev, maxEmpsInShift: data.detail }))   
        ).patch({ max_emps_in_shift: newValue })
    }

    return (
        <section id='pref-card' className='settings-card'>
            <h3 className='settings-title'>Preferences & Functionality</h3>
            <div className='card-content'>
                <Switch label='Dark theme' handleClick={toggleDarkTheme} enabled={settings.darkThemeEnabled}/>
                <Switch label='Use minimum & maximum work hours for pediatricians' handleClick={toggleMinMaxWorkHours} enabled={settings.minMaxWorkHoursEnabled}/>
                <Switch label='Allow multiple pediatricians to be in the same shift' handleClick={toggleMultiEmpsInShift} enabled={settings.multiEmpsInShiftEnabled}/>
                <Switch label='Allow pediatricians to take multiple shifts in a day' handleClick={toggleMultiShiftsOneEmpEnabled} enabled={settings.multiShiftsOneEmpEnabled}/>
                <Dropdown
                    label='Weekend days'
                    options={['Saturday & Sunday', 'Friday & Saturday', 'Sunday & Monday']}
                    onSelect={changeWeekendDays}
                    selected={selectedWeekendDays}
                />
                <div>
                    <label>Maximum number of pediatricians in one shift</label>
                    <input
                        type='number'
                        min={1} max={10}
                        onChange={updateMaxEmpsInShift}
                        value={settings.multiEmpsInShiftEnabled ? settings.maxEmpsInShift : 1}
                        disabled={!settings.multiEmpsInShiftEnabled}
                        className={!settings.multiEmpsInShiftEnabled ? 'disabled-setting-input' : ''}
                    />
                </div>
            </div>
        </section>
    )
}


export default function Settings() {
    return <>
        <Sidebar/>
        <Account/>
        <PreferencesAndFunctionality/>
    </>
}