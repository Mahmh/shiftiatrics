import { useCallback, useContext, useState, useMemo, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { dashboardContext, nullAccount, nullSub } from '@context'
import { Choice, Switch, Dropdown, Request, ChangePasswordModalContent } from '@utils'
import { MIN_YEAR, MAX_YEAR, TOO_MANY_REQS_MSG } from '@const'
import { parseSettings, parseAccount } from '@types'
import type { WeekendDays, InputEvent, AccountResponse, SettingsResponse, Settings } from '@types'
import LoadingScreen from '@/components/_LoadingScreen'

export default function Settings() {
    return <div className='settings-cards'>
        <Account/>
        <Preferences/>
        <Help/>
    </div>
}

const updateSetting = async (setting: string, newValue: boolean | string, accountId: number): Promise<Settings> => {
    return await new Request(
        `settings/${accountId}`,
        (data: SettingsResponse) => parseSettings(data)
    ).patch({ setting: setting, new_value: newValue })
}


// Cards
const Account = () => {
    const router = useRouter()
    const { account, setAccount, setSubscription, teams, employees, shifts, schedules, holidays, openModal, closeModal, setModalContent } = useContext(dashboardContext)
    const [exitingAccount, setExitingAccount] = useState(false)

    const exitAccount = useCallback(() => {
        closeModal()
        setExitingAccount(true)
        window.location.reload()
        document.documentElement.classList.remove('dark-theme')
    }, [closeModal, setExitingAccount])

    /** Counts the total number of schedules generated by the account */
    const numSchedules = useMemo(() => {
        let count = 0
        for (let year = MIN_YEAR; year <= MAX_YEAR; year++) {
            const yearSchedules = schedules.get(year)
            if (!yearSchedules) continue

            for (const teamSchedules of yearSchedules.values()) {
                for (let month = 0; month < teamSchedules.length; month++) {
                    if (teamSchedules[month]) count++
                }
            }
        }
        return count
    }, [schedules])

    /** Logs out of the account */
    const logOut = useCallback(async () => {
        exitAccount()
        await new Request(
            `auth/logout`,
            () => {
                setAccount(nullAccount)
                setSubscription(nullSub)
                router.push('/dashboard')
            }
        ).get()
    }, [router, setAccount, exitAccount, setSubscription])

    /** Displays an account deletion modal. If confirmed, sends an API request to delete the account */
    const openDeleteModal = useCallback(() => {
        const DeleteAccountModalContent = () => {
            const [error, setError] = useState('')

            const deleteAccount = useCallback(async () => {
                exitAccount()
                await new Request(
                    'accounts',
                    () => logOut(),
                    (error) => {
                        if (error.includes('429')) { setError(TOO_MANY_REQS_MSG); return }
                        setError(
                            error.includes('Invalid cookies') ?
                            'Account session has expired. Please log out then log in again to delete your account.'
                            : error
                        )
                    }
                ).delete()
            }, [])

            return <>
                <h1>Delete Your Account?</h1>
                <p>
                    Are you sure you want to send us a request to permanently delete your account?
                    <b> Once deleted, you cannot get back your account.</b>
                </p>
                {error && <p className='error'>{error}</p>}
                <Choice onYes={deleteAccount} onNo={closeModal}/>
            </>
        }
        setModalContent(<DeleteAccountModalContent/>)
        openModal()
    }, [logOut, closeModal, openModal, setModalContent, exitAccount])

    /** Displays a modal for confirming log-out */
    const openLogOutModal = useCallback(() => {
        setModalContent(<>
            <h1>Log Out?</h1>
            <p>You can log in back again later.</p>
            <Choice onYes={logOut} onNo={closeModal}/>
        </>)
        openModal()
    }, [logOut, closeModal, openModal, setModalContent])

    /** Displays a modal for editing the account's email */
    const openChangeEmailModal = useCallback(() => {
        const ChangeEmailModalContent = () => {
            const [tempEmail, setTempEmail] = useState(account.email)
            const [isConfirmDisabled, setConfirmDisabled] = useState(tempEmail.trim().length < 3 || account.email === tempEmail)
            const [error, setError] = useState('')

            const handleEmailChange = (e: InputEvent) => {
                const newEmail = e.target.value
                setTempEmail(newEmail)
                setConfirmDisabled(newEmail.trim().length < 1 || account.email === newEmail)
            }

            const confirmEdit = async () => {
                await new Request(
                    'accounts/email',
                    (data: AccountResponse) => {
                        setAccount(parseAccount(data))
                        closeModal()
                    },
                    (error) => {
                        if (error.includes('429')) { setError(TOO_MANY_REQS_MSG); return }
                        setError(
                            error.includes('Invalid cookies') 
                            ? 'Account session has expired. Please log out then log in again to update your email.'
                            : error
                        )
                    }
                ).patch({ email: tempEmail })
            }

            return <>
                <h2>Change Email</h2>
                <section style={{ marginBottom: 20 }}>
                    <label style={{ marginRight: 10 }}>Email: </label>
                    <input
                        type='text'
                        placeholder='New email'
                        value={tempEmail}
                        onChange={handleEmailChange}
                        maxLength={32}
                    />
                </section>
                {error && <p className='error'>{error}</p>}
                <button
                    onClick={confirmEdit}
                    disabled={isConfirmDisabled}
                    id={isConfirmDisabled ? 'disabled-confirm-btn' : ''}
                >
                    Confirm
                </button>
            </>
        }

        setModalContent(<ChangeEmailModalContent/>)
        openModal()
    }, [account, setAccount, openModal, closeModal, setModalContent])

    /** Displays a modal for creating a new password */
    const openChangePasswordModal = useCallback(() => {
        setModalContent(<ChangePasswordModalContent setAccount={setAccount} closeModal={closeModal}/>)
        openModal()
    }, [setAccount, openModal, closeModal, setModalContent])

    /** Displays a modal for verifying the account's email */
    const openVerifyEmailModal = useCallback(() => {
        const VerifyEmailModalContent = () => {
            const [error, setError] = useState<string|null>(null)
            const [loading, setLoading] = useState(false)

            const requestVerifyEmail = async () => {
                setLoading(true)
                await new Request(
                    'auth/request_verify_email',
                    () => setLoading(false),
                    (error) => {
                        setLoading(false)
                        if (error.includes('429')) { setError(TOO_MANY_REQS_MSG); return }
                        setError(error)
                    }
                ).post({ email: account.email })
            }

            useEffect(() => { requestVerifyEmail() }, [])

            return <>
                <h1>Verify Your Email</h1>
                <p>
                    {
                        loading 
                        ? 'Sending email verification request...'
                        : error || 'We have sent you an email verification request to your email. Please check your inbox and follow the instructions to verify your email.'
                    }
                </p>
            </>
        }
    
        setModalContent(<VerifyEmailModalContent/>)
        openModal()
    }, [account.email, openModal, setModalContent])

    return exitingAccount ? <LoadingScreen/> : (
        <section id='account-card' className='settings-card'>
            <h3 className='settings-title'>Account</h3>
            <div className='card-content'>
                <section>
                    <h1>{account.email}</h1>
                    <ul>
                        <li>{`${numSchedules} schedule${numSchedules === 1 ? '' : 's'} generated`}</li>
                        <li>{`${teams.length} ER team${teams.length === 1 ? '' : 's'} registered`}</li>
                        <li>{`${employees.length} ER staff member${employees.length === 1 ? '' : 's'} registered`}</li>
                        <li>{`${shifts.length} shift${shifts.length === 1 ? '' : 's'} assigned per day`}</li>
                        <li>{`${holidays.length} holiday${holidays.length === 1 ? '' : 's'} assigned`}</li>
                        <li>{`Email is ${account.emailVerified ? '' : 'not'} verified`}</li>
                    </ul>
                </section>
                <section id='account-actions-card'>
                    {!account.emailVerified && <button id='verify-email-btn' onClick={openVerifyEmailModal}>Verify Email</button>}
                    <button className='edit-account-btn' onClick={openChangeEmailModal}>Change Email</button>
                    <button className='edit-account-btn' onClick={openChangePasswordModal}>Change Password</button>
                    <button id='log-out-btn' onClick={openLogOutModal}>Log Out</button>
                    <button id='delete-account-btn' onClick={openDeleteModal}>Delete Account</button>
                </section>
            </div>
        </section>
    )
}


const Preferences = () => {
    const { account, settings, setSettings } = useContext(dashboardContext)
    const [selectedWeekendDays, setSelectedWeekendDays] = useState<WeekendDays>(settings.weekendDays)

    /** Changes the weekend days of the account */
    const changeWeekendDays = async (option: string) => {
        setSettings(await updateSetting('weekend_days', option, account.id))
        setSelectedWeekendDays(option as WeekendDays)
    }

    return (
        <section className='settings-card'>
            <h3 className='settings-title'>Preferences</h3>
            <div className='card-content'>
                <Switch
                    label='Dark theme'
                    handleClick={async () => setSettings(await updateSetting('dark_theme_enabled', !settings.darkThemeEnabled, account.id))}
                    enabled={settings.darkThemeEnabled}
                />
                <Dropdown
                    label='Weekend days'
                    options={['Saturday & Sunday', 'Friday & Saturday', 'Sunday & Monday']}
                    selectedOption={selectedWeekendDays}
                    setSelectedOption={changeWeekendDays}
                />
            </div>
        </section>
    )
}


const Help = () => {
    const router = useRouter()
    return (
        <section className='settings-card'>
            <h3 className='settings-title'>Help</h3>
            <div className='card-content'>
                <p style={{ marginBottom: 20 }}>Have questions, need help, or want to request a change? Don&apos;t hesitate to contact us!</p>
                <button className='card-btn' onClick={() => router.push('/support/contact')}>Contact Us</button>
            </div>
        </section>
    )
}